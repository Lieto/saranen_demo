sum((x - mu)^2)
mu = 0.36
sum((x - mu)^2)
mu = 0.44
sum((x - mu)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(y)~I(x))
lm(I(y - mean(y))~I(x -mean(x)) - 1)
lm(I(y - mean(y))~I(x -mean(x)))
cor(y, x) * sd(y) / sd(x)
yc <- y -mean(y)
xc <- x - mean(x)
beta1 <- sum(yc*xc)/sum(xc^2)
sum(y*x)/sum(x^2)
install.packages("caret")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
plot(density(spam$your[spam$type=="nonspam"]), col="blue",main="", xlab="Frequency of 'your'")
lines(density(spam$your[spam$type=="spam"]), col="red")
abline(v=0.5,col="black")
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam")
table(prediction, spam$type)/length(spam$type)
prediction <- ifelse(spam$your > 1.0, "spam", "nonspam")
table(prediction, spam$type)/length(spam$type)
prediction <- ifelse(spam$your > 0.75, "spam", "nonspam")
table(prediction, spam$type)/length(spam$type)
prediction <- ifelse(spam$your > 0.25, "spam", "nonspam")
table(prediction, spam$type)/length(spam$type)
set.seed(333)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
spamLabel <- (smallSpam$type == "spam")*1 + 1
plot(smallSpam$capitalAve,col=spamLabel)
library("UsingR")
data("diamond")
libray(ggplot2
)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price),)
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g
g = g + geom_smooth(method = "lm", colour = "black")
g
g = ggplot(diamond, aes(x = carat, y = price),)
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 5, colour = "blue", alpha = 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
coef(fit3)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e - (y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
ls()
rm(ls())
rm(list = ls())
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
install_from_swirl("Regression Models")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
plot(child ~ parent)
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
exit
library(UsingR)
data("diamond")
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y -beta0 - beta1 * x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^2 / ssx) ^.5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail=FALSE)
coefTable <- rbind(c(beta0,seBeta0,tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit <- lm(y ~ x)
summary(fit$coefficients)
summary(fit)$coefficients
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1)*qt(.975, df = fit$df)*sumCoef[1,2]
sumCoef[2,1] + c(-1, 1)*qt(.975, df = fit$df)*sumCoef[2,2]
library(ggplot2)
newx = data.frame(x=seq(min(x), max(x), length = 1000))
p1 = data.frame(predict(fit, newdata = newx, interval = ("confidence")))
p2 = data.frame(predict(fit, newdata=newx, interval=("prediction")))
p1$interval = "confidence"
p2$interval="prediction"
p1$x = newx$x
p2$x=newx$x
dat = rbind(p1, p2)
names(data)[1] = "y"
names(dat)[1] = "y"
g = ggplot(dat, aes(x=x, y=y))
g = g + geom_ribbon(aes(ymin = lwf, ymax  = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g
g = ggplot(dat, aes(x=x, y=y))
g = g + geom_ribbon(aes(ymin = lwr, ymax  = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g
g = g + geom_point(data = data.frame(x = x, y = y), aes(x = x, y = y), size = 4)
g
n = 100; x = rnorm(n); x2 = rnorm(n); x3 = rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd = .1)
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1)*qt(.975, df = fit$df)*sumCoef[1,2]
sumCoef
mean(mtcars$wt)
predict(fit, mean(mtcars$wt))
predict(fit, mean(mtcars$wt), interval = ("confidence"))
?predict
predict(fit, newdata = mean(mtcars$wt), interval = ("confidence"))
mtcars$wt
mean(mtcars$wt)
sumCoef[2,1] + c(-1, 1)*qt(.975, df = fit$df)*sumCoef[2,2]
fit
predict(fit, mean(mtcars$wt), interval = ("confidence"))
mean(mtcars$wt)
?mtcars
summary(fit)
rm(list <- ls())
rm(list=ls())
swirl()
swirl
library(swirl)
swirl()
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manipulate)
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(galton$child ~ galton$parent)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
sqrt(cor(galton$child, galton$parent))
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
rm(list <- ls())
rm(list = ls())
install.packages("caret")
library("caret")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p = 0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~ ., data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
folds <- createFolds(y=spam$type,k=10,list=TRUE,returnTrain = TRUE)
sapply(folds,length)
folds[[1][1:10]]
folds[[1]][1:10]
install.packages("ISLR")
library("ISLR")
library(ggplot2)
library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[, c("age","education","jobclass")], y = training$wage, plot = "pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq + geom_smooth(method="lm",formula=y~x)
qq <- qplot(age,wage,colour=jobclass,data=training)
qq + geom_smooth(method="lm",formula=y~x)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
p2
qplot(wage,colour=education,data=training,geom="density")
library(caret)
library(kernlab)
data("spam")
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain]
testing <- spam[-inTrain,]
training <- spam[inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAve <- (testCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAve)
sd(testCapAve)
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
dim(training)
library(ISLR)
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p = 0.7, list = FALSE)
training <- Wage[inTrain]
testing <- Wage[-inTrain,]
training <- Wage[inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
M <- abs(cor(training[,-58]))
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
names(spam)[c(34m32)]
names(spam)[c(34,32)]
plot(spam[,34], spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1], prComp$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1), method="pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col=typeColor)
data("faithful")
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,p=0.5,list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting, trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
lines(trainFaith$waiting, lm1$fitted, lwd=3)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
log10(0)
set.seed(3433)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
koe <- grep("IL_", names(training))
koe
koe <- grep("$IL_", names(training))
koe
koe <- grep($"IL_", names(training))
koe <- grep("^IL_", names(training))
koe
il_vars_index <- grep("^IL_", names(training))
?preProcess
preProc <- preProcess(training[, il_vars_index], method="pca")
preProc
summary(preProc)
preProc$std
preProc <- preProcess(training[, il_vars_index], method="pca", thresh = 0.90)
preProc
head(training)
names(training)
vars_index <- grep("^IL_", names(training)) | grep("^diagnosis", names(training))
vars_index
il_vars_index <- grep("^IL_", names(training))
il_vars_index
vars_index <- grep("^IL_" | "^diagnosis", names(training))
vars_index <- c(grep("^diagnosis", names(training)), grep("^IL_", names(training)))
vars_index
preProc <- preProcess(training[, vars_index], method="pca", thresh = 0.80)
preProc <- preProcess(training[, il_vars_index], method="pca", thresh = 0.80)
?predict
?caret
?fit
?predict
fit <- train(diagnosis ~., data = training[, vars_index], method = "glm")
fit
predict(fit, data=testing[, vars_index])
predict(fit)
predict(fit, data=testing[, il_vars_index])
predict(fit, newdata = testing[,vars_index])
koe <- predict(fit, newdata = testing[,vars_index])
confusionMatrix(data=koe, testing$diagnosis)
setwd("d:/InternalProjects/R/saranen_demo")
install.packages("rCharts")
library(rCharts)
install.packages(rCharts)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
library(shiny)
library(rCharts)
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
?rep
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
setwd("d:/InternalProjects/R/dataproducts")
shiny::runApp()
setwd("d:/InternalProjects/R/saranen_demo")
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp()
shiny::runApp('D:/InternalProjects/R/saranen_demo')
View(galton)
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp()
setwd("d:/InternalProjects/R/saranen_demo")
shiny::runApp()
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
?predict
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
max(galton$child)
min(galton$child)
shiny::runApp('D:/InternalProjects/R/saranen_demo')
head(galton)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?rPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
setwd("d:/InternalProjects/R/dataproducts")
shiny::runApp()
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
?rep
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
function ()
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
shiny::runApp('D:/InternalProjects/R/saranen_demo')
shiny::runApp('d:/InternalProjects/R/saranen_demo')
?nrow
setwd("d:/InternalProjects/R/saranen_demo")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
23.492 + 0.646*70.5
